// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./types";

// This line causes the error because the inferred type doesn't perfectly match the imported `Json` type.
export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.any(), z.any()),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const collageRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  name: z.string().nullable(),
  uni_id: z.string().nullable(),
});

export const collageInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  uni_id: z.string().optional().nullable(),
});

export const collageUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  uni_id: z.string().optional().nullable(),
});

export const collageRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("collage_uni_id_fkey"),
    columns: z.tuple([z.literal("uni_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("university"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const courseRowSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  length: z.number().nullable(),
  name: z.string().nullable(),
});

export const courseInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  length: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
});

export const courseUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  length: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
});

export const courseRelationshipsSchema = z.tuple([]);

export const departmentRowSchema = z.object({
  collage_id: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  name: z.string().nullable(),
  uni_id: z.string().nullable(),
});

export const departmentInsertSchema = z.object({
  collage_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  uni_id: z.string().optional().nullable(),
});

export const departmentUpdateSchema = z.object({
  collage_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional().nullable(),
  uni_id: z.string().optional().nullable(),
});

export const departmentRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("department_collage_id_fkey"),
    columns: z.tuple([z.literal("collage_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("collage"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("department_uni_id_fkey"),
    columns: z.tuple([z.literal("uni_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("university"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const universityRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  name: z.string().nullable(),
});

export const universityInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
});

export const universityUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
});

export const universityRelationshipsSchema = z.tuple([]);
